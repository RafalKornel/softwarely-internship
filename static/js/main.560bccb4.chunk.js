(this["webpackJsonpsoftwarely-internship"]=this["webpackJsonpsoftwarely-internship"]||[]).push([[0],{10:function(e){e.exports=JSON.parse('[{"name":"Nag\u0142\xf3wek drzewa wielowierszowego","type":"checkbox","subNodes":[{"name":"Pododdzia\u0142 1","type":"radio","subNodes":[{"name":"Zesp\xf3\u0142 1 \\nHR","subNodes":[]},{"name":"Zesp\xf3\u0142 2 \\nMarketing","subNodes":[]},{"name":"Zesp\xf3\u0142 3 \\nAnalitycy","type":"checkbox","subNodes":[{"name":"Podzesp\xf3\u0142 3.1 \\nKalendarz","subNodes":[]},{"name":"Podzesp\xf3\u0142 3.2 \\nKokpit","subNodes":[]},{"name":"Podzesp\xf3\u0142 3.3 \\nWidok","subNodes":[]},{"name":"Podzesp\xf3\u0142 3.4 \\nR\xf3\u017cno\u015bci","subNodes":[]},{"name":"Podzesp\xf3\u0142 3.5 \\nSzukaj","subNodes":[]}]},{"name":"Zesp\xf3\u0142 4 \\nProgrami\u015bci","type":"checkbox","subNodes":[{"name":"Podzesp\xf3\u0142 4.1 \\nFront-end","subNodes":[]},{"name":"Podzesp\xf3\u0142 4.2 \\nMiddle-front-end","subNodes":[]},{"name":"Podzesp\xf3\u0142 4.3 \\nMiddle-end","subNodes":[]},{"name":"Podzesp\xf3\u0142 4.4 \\nMiddle-back-end","subNodes":[]},{"name":"Podzesp\xf3\u0142 4.5 \\nBack-end","subNodes":[]}]}]},{"name":"Pododdzia\u0142 2","type":"radio","subNodes":[{"name":"nag\u0142\xf3wek_2_1","type":"radio","subNodes":[{"name":"nag\u0142\xf3wek_2_1_1","type":"radio","subNodes":[{"name":"sample text here 4152","subNodes":[]},{"name":"tekst_2_1_1_2","subNodes":[]}]}]},{"name":"nag\u0142\xf3wek_2_2","type":"checkbox","subNodes":[{"name":"tekst_2_2_1","text":"sample text here","subNodes":[]}]},{"name":"nag\u0142\xf3wek_2_3","type":"radio","subNodes":[{"name":"nag\u0142\xf3wek_2_3_1","type":"radio","subNodes":[{"name":"sample text here 123","subNodes":[]},{"name":"sample text here 453","subNodes":[]}]}]}]},{"name":"Pododdzia\u0142 3","type":"radio","subNodes":[{"name":"nag\u0142\xf3wek_3_1","type":"radio","subNodes":[{"name":"nag\u0142\xf3wek_3_1_1","type":"radio","subNodes":[{"name":"sample text here 646","subNodes":[]},{"name":"sample text here 846","subNodes":[]}]}]}]}]}]')},16:function(e,t,n){},17:function(e,t,n){"use strict";n.r(t);var a=n(0),o=n(1),s=n.n(o),i=n(9),r=n.n(i),c=(n(16),n(6)),d=n(2),p=n(3),u=n(5),l=n(4),h=function(e){Object(u.a)(n,e);var t=Object(l.a)(n);function n(e){var a;return Object(d.a)(this,n),(a=t.call(this,e)).handleClick=function(){a.checked&&(a.nodeRef.current.checked=!1)},a.checked="root"===e.parentName,a.nodeRef=s.a.createRef(),a}return Object(p.a)(n,[{key:"shouldBeOpened",value:function(){return this.nodeRef.current?(this.checked=this.nodeRef.current.checked,this.checked):"root"===this.props.parentName}},{key:"button",value:function(){return Object(a.jsxs)(a.Fragment,{children:[Object(a.jsx)("input",{type:this.props.type,name:this.props.parentName,id:this.props.name,ref:this.nodeRef,onClick:this.handleClick,defaultChecked:"root"===this.props.parentName}),Object(a.jsx)("label",{htmlFor:this.props.name,children:this.props.name})]})}},{key:"text",value:function(){return Object(a.jsx)("span",{className:"node__text",children:this.props.name})}},{key:"subNodes",value:function(){var e=this;return this.props.subNodes.map((function(t,a){return Object(o.createElement)(n,Object(c.a)(Object(c.a)({},t),{},{parentName:e.props.name,key:a}))}))}},{key:"shouldRenderButton",value:function(){return"checkbox"===this.props.type||"radio"===this.props.type}},{key:"render",value:function(){var e=this.shouldRenderButton();return Object(a.jsxs)("div",{className:"node"+(e?"":" node--text"),children:[Object(a.jsx)("div",{className:"node__header",children:e?this.button():this.text()}),Object(a.jsx)("div",{className:"node__children"+(this.shouldBeOpened()?"":"--hidden"),children:this.props.subNodes.length>0&&this.subNodes()})]})}}]),n}(s.a.Component),b=function(e){Object(u.a)(n,e);var t=Object(l.a)(n);function n(){return Object(d.a)(this,n),t.apply(this,arguments)}return Object(p.a)(n,[{key:"render",value:function(){var e=this;return Object(a.jsx)("div",{className:"tree",onClick:function(){return e.forceUpdate()},children:this.props.data.map((function(e,t){return Object(o.createElement)(h,Object(c.a)(Object(c.a)({},e),{},{key:t,parentName:"root"}))}))})}}]),n}(s.a.Component),j=n(7),m=function(){return Object(a.jsxs)("section",{children:[Object(a.jsx)("h1",{children:"Explanation"}),Object(a.jsx)("p",{children:"This is my solution for Softwarely front-end internship recruitment task. The problem was to create accordion-like list, that would be fed data from JSON format, had to manage arbitrary number of nesting, and implement two types of cards: checkboxes and radios. The behaviour is same as HTML's radio/checkbox input, but with small difference, in this app you can uncheck (close) radio button."}),Object(a.jsxs)("p",{children:["The JSON file structure is as follows: ",Object(a.jsx)("br",{}),Object(a.jsxs)("code",{children:["{"," ",Object(a.jsx)("br",{}),Object(a.jsx)("span",{}),' "name": ',"<"," string ",">"," Will be shown in header.",Object(a.jsx)("br",{}),Object(a.jsx)("span",{}),' "type": ',"<",' "radio" | "checkbox" | none ',">"," Determines type of card. If ommited, will use name as header and only show message. ",Object(a.jsx)("br",{}),Object(a.jsx)("span",{}),' "subNodes": ',"<"," array ",">"," Contains all child nodes, which are the same shape as parent.",Object(a.jsx)("br",{}),"{"," ",Object(a.jsx)("br",{})]}),"It contains only 3 fields: name, type and list of inner elements. This scructure allows to easily create very complex list. "]}),Object(a.jsx)("p",{children:" The code has beed writte in Javascript, with React library. It helped with DOM manipulation (adding, removing elements)"}),Object(a.jsx)("p",{children:" Considering data format, the list is created recursively. Code contains two components, Tree (which is a wrapper for whole list), and Node."}),Object(a.jsx)("p",{children:" The second one recursively renders data inside itself, from JSON file. Considering specification of problem, components use state contained in original DOM tree. "}),Object(a.jsx)("p",{children:' Because of this, it was easier to mainain state of components. It could be problematic otherwise, because components are recursive, and in order to recreate radio input behaviour, the state would need to be lifted to common parent. This solution would add more complexity to code. Instead, "name" attribute of HTML element "input" was used, recreating radio input behaviour. '}),Object(a.jsx)("p",{children:' In order to provide full functionality (hiding radio cards), Node component has "checked" field, which is updated (synchronised) with DOM value every time tree updates. This, again is not really proper way of solving problem in React, but it did it\'s job. '}),Object(a.jsx)("p",{children:" React refreshes components only upon change of props or state. Neither of those were changing in solution, thus Tree component refreshes whole tree of nodes upon every click. This was achieved thanks to forceUpdate lifecycle method. "}),Object(a.jsx)("p",{children:' Storing state in DOM is not "React way", but usage of this pattern is justified in current context. React rule, one source of truth, was preserved.'})]})},y=function(){return Object(a.jsxs)("section",{children:[Object(a.jsx)("h1",{children:"Wyja\u015bnienie"}),Object(a.jsx)("p",{children:"Po lewej stronie znajduje si\u0119 moje rozwi\u0105zanie zadania rekrutacyjnego na stanowisko intern front-end developera. Zadanie polega\u0142o na stworzeniu rozwijanej listy, o dowolnej g\u0142\u0119boko\u015bci, z dwoma rodzajami przycisk\xf3w: radio oraz checkbox. Zachowanie przycisk\xf3w jest analogiczne do element\xf3w *input* typy radio oraz checkbox, z t\u0105 r\xf3\u017cnic\u0105, \u017ce w moim rozwi\u0105zaniu przycisk radio da si\u0119 oznaczy\u0107 (zamkn\u0105\u0107). Lista powstaje w opraciu o plik JSON."}),Object(a.jsxs)("p",{children:["Format pliku JSON jest nast\u0119puj\u0105cy: ",Object(a.jsx)("br",{}),Object(a.jsxs)("code",{children:["{"," ",Object(a.jsx)("br",{}),Object(a.jsx)("span",{}),' "name": ',"<"," string ",">"," Tekst wy\u015bwietlony w nag\u0142\xf3wku karty.",Object(a.jsx)("br",{}),Object(a.jsx)("span",{}),' "type": ',"<",' "radio" | "checkbox" | none ',">",' Typ komponentu. Pomini\u0119cie stworzy nieklikalny element (tekst)"',Object(a.jsx)("br",{}),Object(a.jsx)("span",{}),' "subNodes": ',"<"," array ",">"," Zawiera wszystkie zagnie\u017cdzone elementy. ",Object(a.jsx)("br",{}),"{"," ",Object(a.jsx)("br",{})]}),"Zawiera on jedynie 3 pola: nazw\u0119, typ oraz list\u0119 wewn\u0119trznych element\xf3w. Taka struktura pozwala z \u0142atwy spos\xf3b stworzy\u0107 z\u0142o\u017con\u0105 list\u0119."]}),Object(a.jsx)("p",{children:" Kod zosta\u0142 napisany w Javascripcie, z wykorzystaniem biblioteki React. U\u0142atwi\u0142a ona znacznie manipulowaniem DOM'em. "}),Object(a.jsx)("p",{children:' Z uwagi na rodzaj danych wej\u015bciowych, lista jest tworzona rekurencyjnie. W kodzie znajduj\u0105 si\u0119 dwa komponenty, Tree (kt\xf3ry jest tylko "wrapperem" na list\u0119), oraz Node. '}),Object(a.jsx)("p",{children:" Ten drugi rekurencyjnie renderuje wewn\u0105trz siebie dane z pliku JSON. Z uwagi na specyfikacje problemu, komponenty wykorzystuj\u0105 stan przechowywany w oryginalnym drzewie DOM. "}),Object(a.jsx)("p",{children:' Dzi\u0119ki temu unikni\u0119to problemu zarz\u0105dzania stanem ka\u017cdego komponentu. Mog\u0142oby to by\u0107 problematyczne, poniewa\u017c komponenty s\u0105 rekurencyjne, a \u017ceby odtworzy\u0107 dzia\u0142anie radio input\'u, nale\u017cy podnie\u015b\u0107 stan do wsp\xf3lnego komponentu. Rozwi\u0105zanie to, jakkolwiek poprawne, doda\u0142oby z\u0142o\u017cono\u015bci aplikacji. Zamiast tego wykorzystano atrybut "name" elementu HTML "input".  '}),Object(a.jsx)("p",{children:' Aby zapewni\u0107 pe\u0142n\u0105 funkcjonalno\u015b\u0107 (zamykanie kart typu radio), komponent Node zawiera pole "checked", kt\xf3re jest aktualizowane za ka\u017cdym od\u015bwie\u017ceniem drzewa.'}),Object(a.jsx)("p",{children:" React od\u015bwie\u017ca komponenty jedynie przy zmianie props'\xf3w, lub stanu. Poniewa\u017c w rozwi\u0105zaniu \u017cadne z dw\xf3ch si\u0119 nie zmienia (stan trzymany jest przez DOM), komponent Tree przy ka\u017cdym klikni\u0119ciu od\u015bwie\u017ca ca\u0142e drzewo. Dokonano to za pomoc\u0105 funkcji cyklu \u017cycia forceUpdate. "}),Object(a.jsx)("p",{children:" Przechowywanie stanu w DOM'ie nie jest zgodne z filozofi\u0105 Reacta, jednak wykorzystanie tego schematu jest usprawieliwione w tym przypadku, tak\u017ce zosta\u0142y zachowane inne zasady Reacta (jedno \u017ar\xf3d\u0142o prawdy) "})]})},w=function(e){Object(u.a)(n,e);var t=Object(l.a)(n);function n(e){var a;return Object(d.a)(this,n),(a=t.call(this,e)).state={en:!0},a.switch=a.switch.bind(Object(j.a)(a)),a}return Object(p.a)(n,[{key:"switch",value:function(){this.setState((function(e){return{en:!e.en}}))}},{key:"render",value:function(){return Object(a.jsxs)(a.Fragment,{children:[Object(a.jsx)("input",{type:"button",value:this.state.en?"PL":"EN",onClick:this.switch,className:"langSwitch"}),this.state.en?Object(a.jsx)(m,{}):Object(a.jsx)(y,{})]})}}]),n}(s.a.Component),k=n(10),z=function(e){return Object(a.jsxs)(a.Fragment,{children:[Object(a.jsx)(b,{data:k}),Object(a.jsx)(w,{})]})};r.a.render(Object(a.jsx)(s.a.StrictMode,{children:Object(a.jsx)(z,{})}),document.getElementById("root"))}},[[17,1,2]]]);
//# sourceMappingURL=main.560bccb4.chunk.js.map